#include "Utils.h"
#include "ErrorHandler.h"
#ifdef _WIN32
    //#include <direct.h>
    #include <Windows.h>
#elif __APPLE__
    #include <mach-o/dyld.h>
    #include <unistd.h>
    #include <codecvt>
    #include <locale>
#endif

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Utils::FileSystem //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool Utils::Filesystem::DirectoryExists(const std::string& dir) {
#ifdef _WIN32
    DWORD attributes = GetFileAttributesW(dir.c_str());
    if (attributes == INVALID_FILE_ATTRIBUTES)
        return false;
    if (attributes & FILE_ATTRIBUTE_DIRECTORY)
        return true;
    return false;
#elif __APPLE__
    int res = access(dir.c_str(), R_OK);
    if (res < 0 && errno == ENOENT)
        return false;
    return true;
#endif
};

std::string Utils::Filesystem::GetWorkingDirectory() {
    std::string workingDir;
    workingDir.resize(FILENAME_MAX);
#ifdef _WIN32
    _wgetcwd(&workingDir.front(), workingDir.size());
#elif __APPLE__
    uint32_t inoutSize = workingDir.size();
    _NSGetExecutablePath(&workingDir.front(), &inoutSize);
#endif
    return workingDir;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Utils::Internal ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
std::string Utils::Internal::GetMediaFolderPath() {
    if (Utils::Filesystem::DirectoryExists(L"Media/")) {
        return Utils::Filesystem::GetWorkingDirectory() + std::string("/Media/");
    }
    if (Utils::Filesystem::DirectoryExists(L"../Media")) {
        return Utils::Filesystem::GetWorkingDirectory() + std::string("/../Media/");
    }
    VE_ERROR("Failed to find media folder");
    return std::string("");
}